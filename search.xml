<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go实现8大排序以及查找算法</title>
      <link href="/2023/03/01/go-shi-xian-8-da-pai-xu-yi-ji-cha-zhao-suan-fa/"/>
      <url>/2023/03/01/go-shi-xian-8-da-pai-xu-yi-ji-cha-zhao-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、查找算法"><a href="#一、查找算法" class="headerlink" title="一、查找算法"></a>一、查找算法</h2><h3 id="1-1二分查找"><a href="#1-1二分查找" class="headerlink" title="1.1二分查找"></a>1.1二分查找</h3><ol><li><p>定义一个包含有序整数的数组。</p><pre class=" language-go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre></li><li><p>定义一个函数，用于执行二分查找，接收两个参数：要查找的值和有序整数数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">,</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> low <span class="token operator">:=</span> <span class="token number">0</span> high <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>     mid <span class="token operator">:=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>     <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value <span class="token punctuation">{</span>         low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> low <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">!=</span> value <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></li><li><p>在 main 函数中调用 binarySearch 函数，并打印结果。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span> value <span class="token operator">:=</span> <span class="token number">5</span> <span class="token keyword">if</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is in the array.\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is not in the array.\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该代码使用了一个名为 binarySearch 的函数来执行二分查找。该函数接受两个参数：value 和 arr，其中 value 是要查找的值，arr 是包含有序整数的数组。函数返回 true，如果值存在于数组中，否则返回 false。</p></li></ol><p>函数使用 low 和 high 变量来跟踪要搜索的数组的范围。在每次循环中，mid 变量计算中间元素的索引。如果该元素小于 value，则 low 被设置为 mid + 1，否则 high 被设置为 mid - 1。循环继续，直到 low 大于 high。</p><p>最后，在函数的末尾，如果 low 等于数组的长度或 arr[low] 不等于 value，则返回 false。否则，返回 true。</p><p>在 main 函数中，我们定义了一个数组和一个值，然后调用 binarySearch 函数，并根据结果打印消息。如果值存在于数组中，则打印一条消息指示该值存在于数组中，否则打印一条消息指示该值不存在于数组中。</p><h3 id="1-2插值查找"><a href="#1-2插值查找" class="headerlink" title="1.2插值查找"></a>1.2插值查找</h3><p>插值查找算法是一种针对有序数组的查找算法，相比于二分查找，它可以在数组元素分布较为均匀的情况下获得更好的查找效率。下面是使用 Go 实现插值查找算法的步骤：</p><ol><li><p>定义插值查找函数，函数接收两个参数：待查找的有序数组和待查找的值。</p></li><li><p>计算查找值在数组中的位置估计值，采用插值计算公式：mid = low + (high-low)*(key-a[low])/(a[high]-a[low])。</p></li><li><p>判断估计值是否越界，如果越界则说明查找值不在数组中，返回 -1。</p></li><li><p>如果估计值对应的数组元素等于查找值，则直接返回该元素的下标。</p></li><li><p>如果估计值对应的数组元素小于查找值，则说明待查找值在数组的右半部分，更新查找范围为右半部分，继续执行第2步。</p></li><li><p>如果估计值对应的数组元素大于查找值，则说明待查找值在数组的左半部分，更新查找范围为左半部分，继续执行第2步。</p></li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">interpolationSearch</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    low<span class="token punctuation">,</span> high <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>        mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>key<span class="token operator">-</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mid <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> mid <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid        <span class="token punctuation">}</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>使用示例：</p><pre class=" language-go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>key <span class="token operator">:=</span> <span class="token number">5</span>index <span class="token operator">:=</span> <span class="token function">interpolationSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 2</span></code></pre><p>在这个示例中，我们定义了一个有序数组 arr，待查找的值为 key。使用 interpolationSearch 函数查找 key 在数组 arr 中的下标，并将结果输出到控制台。由于 key 在数组中的下标为 2，因此输出结果为 2。</p><p>需要注意的是，插值查找算法需要数组元素分布较为均匀，如果数组元素分布不均匀，则可能会导致插值估计值偏差较大，进而影响查找效率。因此，在使用插值查找算法时需要根据实际情况进行评估和选择。</p><h2 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h2><h3 id="2-1冒泡排序"><a href="#2-1冒泡排序" class="headerlink" title="2.1冒泡排序"></a>2.1冒泡排序</h3><p>冒泡排序是一种简单的排序算法，它的基本思想是通过不断交换相邻的元素，将小的元素逐渐交换到数组的前面。实现冒泡算法的优化版可以提高算法的效率。下面是使用 Go 实现冒泡算法优化版的步骤：</p><ol><li>定义一个 slice（切片）变量，存储需要排序的数据<pre class=" language-go"><code class="language-go">data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre></li><li>定义一个布尔变量 swapped，表示是否进行了交换操作，初始值为 true。<pre class=" language-go"><code class="language-go">swapped <span class="token operator">:=</span> <span class="token boolean">true</span></code></pre></li><li>使用 for 循环来遍历整个 slice，如果没有进行交换操作，则说明已经排好序，可以退出循环。<pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> swapped <span class="token punctuation">{</span> swapped <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 进行排序操作</span><span class="token punctuation">}</span></code></pre></li><li>在循环体内部，定义一个变量 n，表示已排好序的元素个数，每次循环都将其初始化为 0。<pre class=" language-go"><code class="language-go">n <span class="token operator">:=</span> <span class="token number">0</span></code></pre></li><li>使用 for 循环来遍历未排序的元素，每次取出相邻的两个元素进行比较，如果前面的元素比后面的元素大，则交换它们的位置，并将 swapped 置为 true，表示进行了交换操作。<pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>     data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     swapped <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>在每次循环结束时，将已排好序的元素个数 n 加 1。<pre class=" language-go"><code class="language-go">n<span class="token operator">++</span></code></pre></li><li>最后，遍历已经排好序的 slice，输出排序结果。<pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>完整的冒泡排序优化版的 Go 代码如下：<br>```go<br>package main</li></ol><p>import “fmt”</p><p>func main() {<br>    data := []int{5, 3, 8, 4, 2}<br>    swapped := true<br>    for swapped {<br>        swapped = false<br>        n := 0<br>        for i := 1; i &lt; len(data)-n; i++ {<br>            if data[i-1] &gt; data[i] {<br>                data[i], data[i-1] = data[i-1], data[i]<br>                swapped = true<br>            }<br>        }<br>        n++<br>    }<br>    for _, num := range data {<br>        fmt.Print(num, “ “)<br>    }<br>}</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go内存缓存</title>
      <link href="/2023/02/22/go-nei-cun-huan-cun/"/>
      <url>/2023/02/22/go-nei-cun-huan-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>基本上每个项目都有加快服务响应或复杂计算的需求。简单快速的解决方案是使用缓存。通常，有Redis或Memcached，但我们在单实例微服务中不需要使用它们。有时候在你的Go应用程序中使用一个简单的内存缓存会更好，今天我想介绍实现内存缓存的方法。</p><h2 id="2-内存存储方式"><a href="#2-内存存储方式" class="headerlink" title="2.内存存储方式"></a>2.内存存储方式</h2><p>通用结构体定义</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> cacheModel<span class="token keyword">import</span> <span class="token string">"errors"</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Id    <span class="token builtin">int64</span>  <span class="token string">`json:"id"`</span>    Email <span class="token builtin">string</span> <span class="token string">`json:"email"`</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    ErrUserNotInCache <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"the user is not in cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-1-Map方式"><a href="#2-1-Map方式" class="headerlink" title="2.1 Map方式"></a>2.1 Map方式</h3><p>通常，使用map存储结构体。此外，还需要监控元素的过期时间和缓存大小。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"awesomeProject/cacheModel"</span>  <span class="token string">"fmt"</span>  <span class="token string">"sync"</span>  <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 实际存到map中的结构体内容</span><span class="token keyword">type</span> cachedUser <span class="token keyword">struct</span> <span class="token punctuation">{</span>  cacheModel<span class="token punctuation">.</span>User  expireAtTimestamp <span class="token builtin">int64</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建缓存结构体，包含对象的增加、删除等方法</span><span class="token keyword">type</span> localCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>  stop  <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  wg    sync<span class="token punctuation">.</span>WaitGroup  mu    sync<span class="token punctuation">.</span>RWMutex         <span class="token comment" spellcheck="true">// 对写锁</span>  users <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>cachedUser <span class="token comment" spellcheck="true">// map存储用户信息</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建缓存对象，cleanupInterval设置定期清除缓存过期元素</span><span class="token keyword">func</span> <span class="token function">newLocalCache</span><span class="token punctuation">(</span>cleanupInterval time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>localCache <span class="token punctuation">{</span>  lc <span class="token operator">:=</span> <span class="token operator">&amp;</span>localCache<span class="token punctuation">{</span>    users<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>cachedUser<span class="token punctuation">)</span><span class="token punctuation">,</span>    stop<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 启动携程后定期清除过期元素</span>  lc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cleanupInterval time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> lc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lc<span class="token punctuation">.</span><span class="token function">cleanupLoop</span><span class="token punctuation">(</span>cleanupInterval<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">(</span>cleanupInterval<span class="token punctuation">)</span>  <span class="token keyword">return</span> lc<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lc <span class="token operator">*</span>localCache<span class="token punctuation">)</span> <span class="token function">cleanupLoop</span><span class="token punctuation">(</span>interval time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span>  <span class="token keyword">defer</span> t<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>lc<span class="token punctuation">.</span>stop<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 主动退出</span>      <span class="token keyword">return</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">:</span>      lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> uid<span class="token punctuation">,</span> cu <span class="token operator">:=</span> <span class="token keyword">range</span> lc<span class="token punctuation">.</span>users <span class="token punctuation">{</span>        <span class="token keyword">if</span> cu<span class="token punctuation">.</span>expireAtTimestamp <span class="token operator">&lt;=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">delete</span><span class="token punctuation">(</span>lc<span class="token punctuation">.</span>users<span class="token punctuation">,</span> uid<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lc <span class="token operator">*</span>localCache<span class="token punctuation">)</span> <span class="token function">stopCleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span>lc<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>  lc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新元素过期时间</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lc <span class="token operator">*</span>localCache<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>u cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">,</span> expireAtTimestamp <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lc<span class="token punctuation">.</span>users<span class="token punctuation">[</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">]</span> <span class="token operator">=</span> cachedUser<span class="token punctuation">{</span>    User<span class="token punctuation">:</span>              u<span class="token punctuation">,</span>    expireAtTimestamp<span class="token punctuation">:</span> expireAtTimestamp<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 读缓存</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lc <span class="token operator">*</span>localCache<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  cu<span class="token punctuation">,</span> ok <span class="token operator">:=</span> lc<span class="token punctuation">.</span>users<span class="token punctuation">[</span>id<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>    <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cacheModel<span class="token punctuation">.</span>ErrUserNotInCache  <span class="token punctuation">}</span>  <span class="token keyword">return</span> cu<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除缓存元素</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lc <span class="token operator">*</span>localCache<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> lc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">delete</span><span class="token punctuation">(</span>lc<span class="token punctuation">.</span>users<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lc <span class="token operator">:=</span> <span class="token function">newLocalCache</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  user1 <span class="token operator">:=</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span>    Id<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>    Email<span class="token punctuation">:</span> <span class="token string">"12345@163.com"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  user2 <span class="token operator">:=</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span>    Id<span class="token punctuation">:</span>    <span class="token number">2</span><span class="token punctuation">,</span>    Email<span class="token punctuation">:</span> <span class="token string">"qweret@163.com"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  lc<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>cachedUser<span class="token punctuation">{</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>User<span class="token punctuation">:</span> user1<span class="token punctuation">,</span> expireAtTimestamp<span class="token punctuation">:</span> <span class="token number">1676361777</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>User<span class="token punctuation">:</span> user2<span class="token punctuation">,</span> expireAtTimestamp<span class="token punctuation">:</span> <span class="token number">1677035802</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">{</span>    u1<span class="token punctuation">,</span> err <span class="token operator">:=</span> lc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error reading:%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的例子我们使用用户ID作为缓存元素的Key。使用map，所有update/read/delete操作时间复杂度都是O(1)</p><ul><li>优点<ul><li>实现简单</li><li>性能高</li></ul></li><li>缺点<ul><li>存储每一类结构体都需要实现缓存</li><li>需要单独测试缓存</li><li>单独的bug修复</li></ul></li></ul><h3 id="2-2-gCache库"><a href="#2-2-gCache库" class="headerlink" title="2.2 gCache库"></a>2.2 gCache库</h3><p>gCache库对缓存实现进行抽象，包含各种配置。例如，可以很简单地设置缓存淘汰规则，缓存元素最大长度，过期时间TTL等</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"awesomeProject/cacheModel"</span>  <span class="token string">"errors"</span>  <span class="token string">"fmt"</span>  <span class="token string">"github.com/bluele/gcache"</span>  <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">type</span> gCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>  Users gcache<span class="token punctuation">.</span>Cache <span class="token comment" spellcheck="true">// 该对象可以缓存任何类型数据</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  cacheSize <span class="token operator">=</span> 1_000_000  cacheTTL  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建缓存对象，使用ARC算法淘汰缓存元素</span><span class="token keyword">func</span> <span class="token function">newGCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gCache <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>gCache<span class="token punctuation">{</span>    Users<span class="token punctuation">:</span> gcache<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cacheSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Expiration</span><span class="token punctuation">(</span>cacheTTL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ARC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新缓存元素过期时间</span><span class="token keyword">func</span> <span class="token punctuation">(</span>gc <span class="token operator">*</span>gCache<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>u cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">,</span> expireIn time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gc<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">SetWithExpire</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> u<span class="token punctuation">,</span> expireIn<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 读取缓存</span><span class="token keyword">func</span> <span class="token punctuation">(</span>gc <span class="token operator">*</span>gCache<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  val<span class="token punctuation">,</span> err <span class="token operator">:=</span> gc<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> gcache<span class="token punctuation">.</span>KeyNotFoundError<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cacheModel<span class="token punctuation">.</span>ErrUserNotInCache    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"get: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span>cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除缓存元素</span><span class="token keyword">func</span> <span class="token punctuation">(</span>gc <span class="token operator">*</span>gCache<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  gc<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  g <span class="token operator">:=</span> <span class="token function">newGCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  u1 <span class="token operator">:=</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span>    Id<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>    Email<span class="token punctuation">:</span> <span class="token string">"1234@qq.com"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"update error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">{</span>    v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：两秒后查询缓存，发现缓存对象已经被清理了</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span>the user is not in cache</code></pre><ul><li>优点<ul><li>可直接投入生产环境中使用</li><li>接口适用任意类型</li><li>不同的缓存淘汰算法：LRU，LFU，ARC</li></ul></li><li>缺点<ul><li>去缓存都需要做类型转换性能差</li><li>这个库有一点时间没有维护</li></ul></li></ul><h3 id="2-3-BigCache库"><a href="#2-3-BigCache库" class="headerlink" title="2.3 BigCache库"></a>2.3 BigCache库</h3><p>BigCache库高性能、支持并发、缓存淘汰，可存储大量元素而不影响性能。BigCache将元素放在堆中忽略GC<br>eg:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"awesomeProject/cacheModel"</span>    <span class="token string">"context"</span>    <span class="token string">"encoding/json"</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/allegro/bigcache"</span>    <span class="token string">"github.com/spf13/cast"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">type</span> bigCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>    users <span class="token operator">*</span>bigcache<span class="token punctuation">.</span>BigCache<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newBigCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>bigCache<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    bCache<span class="token punctuation">,</span> err <span class="token operator">:=</span> bigcache<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bigcache<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分片数量（必须是2的幂次方）</span>        Shards<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 存活时间，过了该时间才会删除元素</span>        LifeWindow<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 删除过期元素的时间间隔（清理缓存）</span>        <span class="token comment" spellcheck="true">// 如果设置为&lt;=0,则不执行任何操作</span>        <span class="token comment" spellcheck="true">// 设置为&lt;1秒会适得其反 bigCache只能精确到1秒</span>        CleanWindow<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// reps * lifeWindow, 仅用于初始内存分配</span>        MaxEntriesInWindow<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 以字节为单位的元素大小最大值，仅在舒适内存分配时使用</span>        MaxEntrySize<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 打印内存分配信息</span>        Verbose<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 缓存分配的内存不会超过这个限制，MB单位</span>        <span class="token comment" spellcheck="true">// 如果达到值，则可以为新条目覆盖旧的元素</span>        <span class="token comment" spellcheck="true">// 0值表示没有限制</span>        HardMaxCacheSize<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 当最旧的元素由于过期时间或没有剩余空间而被删除时，触发回调</span>        <span class="token comment" spellcheck="true">// 对于新元素，或者因为调用了delete。将返回一个表示原因的位掩码.</span>        <span class="token comment" spellcheck="true">// 默认值为nil，这意味着没有回调.</span>        OnRemove<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// OnRemoveWithReason当因为过期时间或没有空间时，最老一条元素被删除会触发该回调。会返回删除原因。</span>        <span class="token comment" spellcheck="true">// 默认值为nil。</span>        OnRemoveWithReason<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"new big cache : %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>bigCache<span class="token punctuation">{</span>        users<span class="token punctuation">:</span> bCache<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新缓存中的元素</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>bigCache<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>u cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    bs<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"marshal:%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> bs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除缓存中的元素</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>bigCache<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 读取缓存中的元素</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>bigCache<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bs<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> bigcache<span class="token punctuation">.</span>ErrEntryNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cacheModel<span class="token punctuation">.</span>ErrUserNotInCache        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"get: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> u cacheModel<span class="token punctuation">.</span>User    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unmarshal: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newBigCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"new big cache err :%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    u <span class="token operator">:=</span> cacheModel<span class="token punctuation">.</span>User<span class="token punctuation">{</span>        Id<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>        Email<span class="token punctuation">:</span> <span class="token string">"1234@qq.com"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"update big cache err :%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        u<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"read big cache err :%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：”LifeWindow: 5 * time.Second” 缓存数据为5秒钟，”CleanWindow: 2 * time.Second” 为每2秒检测一次过期元素并进行删除，上面运行结果每隔1秒获取一次元素并打印，则在第7秒时检测到元素已过期并进行删除，随后再次使用read()方法进行读取时，报错打印元素不存在。</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">1234</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">}</span>read big cache err <span class="token punctuation">:</span>the user is not in cache</code></pre><p>我们使用JSON编码/解码元素，但也可以使用任何数据格式。例如，一种二进制格式Protobuf可以显著提高性能</p><ul><li>优点<ul><li>可用户生产环境</li><li>丰富的缓存配置</li><li>维护当中</li><li>缓存不会触发GC，在大元素存储性能高</li></ul></li><li>缺点<ul><li>需要自己实现元素编解码。</li></ul></li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>我们调研了Golang的不同内存缓存。记住没有最好的解决方案，需要根据实际应用场景来决定。 使用本文来比较解决方案，并决定哪一个适合您的项目需要</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang修养之路</title>
      <link href="/2023/02/21/golang-xiu-yang-zhi-lu/"/>
      <url>/2023/02/21/golang-xiu-yang-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1、数据定义"><a href="#1、数据定义" class="headerlink" title="1、数据定义"></a>1、数据定义</h2><p>(1).函数返回值问题<br>下面代码是否可以编译通过？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">/*下面代码是否编译通过?*/</span><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>答案:</p><p>编译报错理由:</p><pre class=" language-go"><code class="language-go">#command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token punctuation">.</span><span class="token operator">/</span>test1<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span> syntax <span class="token builtin">error</span><span class="token punctuation">:</span> mixed named and unnamed function parameters</code></pre><p>考点：函数返回值命名<br>结果：编译出错。<br>在函数有多个返回值时，只要有一个返回值有指定命名，其他的也必须有命名。 如果返回值有有多个返回值必须加上括号； 如果只有一个返回值并且有命名也需要加上括号； 此处函数第一个返回值有sum名称，第二个未命名，所以错误。</p><h2 id="2-结构体比较问题"><a href="#2-结构体比较问题" class="headerlink" title="(2).结构体比较问题"></a>(2).结构体比较问题</h2><p>下面代码是否可以编译通过？为什么？<br>test2.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sn1 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>        age  <span class="token builtin">int</span>        name <span class="token builtin">string</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span>    sn2 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>        age  <span class="token builtin">int</span>        name <span class="token builtin">string</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> sn1 <span class="token operator">==</span> sn2 <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sn1 == sn2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    sm1 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>        age <span class="token builtin">int</span>        m   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    sm2 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>        age <span class="token builtin">int</span>        m   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> sm1 <span class="token operator">==</span> sm2 <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sm1 == sm2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果<br>编译不通过</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">.</span><span class="token operator">/</span>test2<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span> invalid operation<span class="token punctuation">:</span> sm1 <span class="token operator">==</span> <span class="token function">sm2</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> containing <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> cannot be compared<span class="token punctuation">)</span></code></pre><p>考点:结构体比较<br>结构体比较规则注意1：只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关.<br>比如：</p><pre class=" language-go"><code class="language-go">sn1 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    age  <span class="token builtin">int</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span>sn3<span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string">"qq"</span><span class="token punctuation">}</span></code></pre><p>sn3与sn1就不是相同的结构体了，不能比较。<br>结构体比较规则注意2：结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice，则结构体不能用==比较。<br>可以使用reflect.DeepEqual进行比较</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>sm1<span class="token punctuation">,</span> sm2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sm1 == sm2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sm1 != sm2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="3-string与nil类型"><a href="#3-string与nil类型" class="headerlink" title="(3).string与nil类型"></a>(3).string与nil类型</h2><p>下面代码是否能够编译通过？为什么？<br>test3.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> m<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"存在数据"</span><span class="token punctuation">,</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    intmap<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span>        <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"bb"</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"ccc"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    v<span class="token punctuation">,</span>err<span class="token operator">:=</span><span class="token function">GetValue</span><span class="token punctuation">(</span>intmap<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>考点：函数返回值类型<br>答案：编译不会通过。<br>分析：<br>nil 可以用作 interface、function、pointer、map、slice 和 channel 的“空值”。但是如果不特别指定的话，Go 语言不能识别类型，所以会报错。通常编译的时候不会报错，但是运行是时候会报:cannot use nil as type string in return argument.<br>所以将GetValue函数改成如下形式就可以了</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> m<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"存在数据"</span><span class="token punctuation">,</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"不存在数据"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
